=== DOMAIN START ===
  (define (domain robot_navigation)
    (:requirements :strips)
    (:types robot location wall obstacle)
    (:predicates
      (at ?r - robot ?l - location)
      (facing ?r - robot north south east west)
      (clear ?l - location)
      (obstacle ?o - obstacle ?l - location)
      (wall ?w - wall ?l - location)
    )

    (:action move
      :parameters (?r - robot ?dir - direction)
      :precondition (and (at ?r ?c) (clear ?c))
      :effect (and (not (at ?r ?c)) (at ?r (if (eql ?dir north) (conjunct (facing ?r north) (next-location ?c (north ?c))))
                    (if (eql ?dir south) (conjunct (facing ?r south) (next-location ?c (south ?c))))
                    (if (eql ?dir east) (conjunct (facing ?r east) (next-location ?c (east ?c))))
                    (if (eql ?dir west) (conjunct (facing ?r west) (next-location ?c (west ?c))))))

    (:action turn
      :parameters (?r - robot ?t - direction)
      :precondition (at ?r ?c)
      :effect (and (not (facing ?r ?c)) (if (eql ?t north) (conjunct (facing ?r north) (next-facing ?c north)))
                    (if (eql ?t south) (conjunct (facing ?r south) (next-facing ?c south)))
                    (if (eql ?t east) (conjunct (facing ?r east) (next-facing ?c east)))
                    (if (eql ?t west) (conjunct (facing ?r west) (next-facing ?c west)))))

    (:action perceive
      :parameters (?r - robot)
      :precondition (at ?r ?c)
      :effect (clear ?c)
      :allow-goal (t))

    (:action remove-obstacle
      :parameters (?r - robot ?o - obstacle ?l - location)
      :precondition (and (at ?r ?l) (obstacle ?o ?l))
      :effect (not (obstacle ?o ?l)))

    (:action place-obstacle
      :parameters (?r - robot ?o - obstacle ?l - location)
      :precondition (and (at ?r ?l) (not (obstacle ?o ?l)))
      :effect (obstacle ?o ?l))

    (:action build-wall
      :parameters (?r - robot ?w - wall ?l - location)
      :precondition (and (at ?r ?l) (not (wall ?w ?l)))
      :effect (wall ?w ?l))
  )
  === DOMAIN END ===

  === PROBLEM START ===
  (define (problem robot_map)
    (:domain robot_navigation)
    (:objects
      r1 - robot
      l1 l2 l3 l4 l5 l6 - location
      o1 o2 o3 - obstacle
      w1 w2 - wall)
    (:init
      (and (at r1 l1) (clear l1) (not (obstacle o1 l1)) (not (wall w1 l1)))
      (obstacle o1 l2)
      (obstacle o2 l3)
      (clear l4)
      (wall w1 l5)
      (wall w2 l6))
    (:goal (and (clear l2) (clear l3)))
  )
  === PROBLEM END ===

QUEST TITLE: Robot Navigation Challenge

WORLD CONTEXT: The robot can move in four directions (north, south, east, west), perceive its surroundings to clear obstacles and walls, build walls, remove obstacles, and turn. There are six locations, three obstacles, two walls, and one robot in the world.

INITIAL STATE: The robot is at location 1, facing north, there is no obstacle or wall at this location. There is an obstacle at location 2 and another at location 3. Location 4 is clear. There is a wall at location 5 and another at location 6.

GOAL CONDITIONS: The robot must reach locations 2 and 3, which means those locations should be cleared.