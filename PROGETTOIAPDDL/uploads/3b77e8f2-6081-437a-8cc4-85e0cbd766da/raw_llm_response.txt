=== DOMAIN START ===
  (define (domain world_travel)
    (:requirements :strips)
    (:types city agent)
    (:predicates
      (at ?a - agent ?c - city)
      (connected ?c1 - city ?c2 - city)
    )

    (:action travel
      :parameters (?a - agent ?c1 - city ?c2 - city)
      :precondition (and (at ?a ?c1) (connected ?c1 ?c2))
      :effect (and (not (at ?a ?c1)) (at ?a ?c2))
    )
  )
  === DOMAIN END ===

  === PROBLEM START ===
  (define (problem city_journey)
    (:domain world_travel)
    (:objects
      agent1 - agent
      city1 city2 city3 - city
    )
    (:init
      (at agent1 city1)
      (connected city1 city2)
      (connected city2 city3)
    )
    (:goal (and (not (at agent1 city1)) (at agent1 city3)))
  )
  === PROBLEM END ===

  This is the domain and problem for a simple travel scenario where an agent can travel between cities. The initial state shows that the agent is in city1, connected to both city2 and city3. The goal condition requires the agent to be in city3 (not at city1). There are no branching factors or depth constraints defined.