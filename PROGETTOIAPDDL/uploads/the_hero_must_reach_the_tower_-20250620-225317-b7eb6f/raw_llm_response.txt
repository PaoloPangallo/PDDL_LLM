=== DOMAIN START ===
(define (domain blocks_world)
  (:action pick
    :parameters (?x - block)
    :precondition (and (clear ?x) (on-table ?x))
    :effect (and (not (on-table ?x)) (holding ?x)))
  (:action putdown
    :parameters (?x - block)
    :precondition (holding ?x))
  (:action place
    :parameters (?x - block ?y - location)
    :effect (and (not (on-table ?x)) (at ?x ?y)))
  (:action stack
    :parameters (?b1 - block ?b2 - block ?sp - stack ?t - table)
    :precondition (and (holding ?b1) (clear ?sp) (on ?b2 ?sp) (and (or (not (stacked ?b1)) (not (on ?b1 ?t))) (on-table ?t)))
    :effect (and (not (holding ?b1)) (stacked ?b1 ?b2) (clear ?sp) (not (on ?b2 ?sp))))
  (:action unstack
    :parameters (?b1 - block ?b2 - block ?t - table)
    :precondition (and (stacked ?b1 ?b2) (on-table ?t)))
  (:action takefrom
    :parameters (?b1 - block ?sp - stack)
    :effect (and (holding ?b1) (clear ?sp) (not (stacked ?b1)) (not (on ?b1 ?sp))))
  (:action move
    :parameters (?x - block ?y - location)
    :precondition (and (at ?x (location ?y)))
    :effect (and (not (at ?x (location ?y))) (at ?x (empty-location)) (at (empty-location) ?y)))
  (:action drop
    :parameters (?x - block)
    :precondition (holding ?x))
  (:action add
    :parameters (?x - block ?sp - stack)
    :effect (and (clear ?sp) (stacked ?x ?sp)))
  (:action remove
    :parameters (?x - block ?sp - stack)
    :precondition (stacked ?x ?sp))
  (:predicate clear ?p
    :atom (not (stacked any-block ?p)))
  (:predicate on ?x ?y
    :atom (and (not (equal ?x (empty-location))) (blockp ?x) (on-table ?y) (and (or (equal ?x ?y) (exists (?z)(and (stacked ?z ?x) (on-table ?z))))))
  (:predicate on-table ?x
    :atom (and (not (blockp ?x)) (eql ?x (table))))
  (:predicate at ?x (location ?y)
    :atom (and (blockp ?x) (or (equal ?y (empty-location)) (exists (?z)(and (stack ?x ?z) (equal ?y (location (block ?z)))))))
  (:predicate stacked ?b1 ?b2
    :atom (and (blockp ?b1) (blockp ?b2) (or (equal ?b1 ?b2) (exists (?t)(and (stack ?b1 ?t) (on-table ?t))))))
  (:function blockp - type
    :function-schema (eql ?x (block) if (and (atom ?x) (not (empty-location))) or (blockp (car ?x)))
  (:function empty-location - constant)
)
=== DOMAIN END ===

=== PROBLEM START ===
(define (problem blocks_world_initial)
  (:domain blocks_world)
  (:object-schema (block))
  (:init
    (and (clear table)
         (and (at block1 (location empty-location)) (on-table block1))
         (and (at block2 (location empty-location)) (on-table block2))
         (and (at block3 (location empty-location)) (on-table block3)))
)
(:goal (and (clear table) (and (at block1 (location location1)) (stacked block2 block1) (at block2 (location location2)) (at block3 (location location3))))
)
=== PROBLEM END ===