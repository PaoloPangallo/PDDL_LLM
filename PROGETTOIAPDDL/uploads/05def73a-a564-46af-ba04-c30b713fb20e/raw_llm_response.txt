=== DOMAIN START ===
   (define (domain swords-and-dragons)
     :requirements ((equivalent '(and (not (sleeping-dragon)) (has-hero sword)) '(defeated-dragon)))
     :types agent location action
     :predicates
       (location? location)
       (at location agent)
       (hidden sword location)
       (sleeping-dragon location)
       (has-hero sword)
       (defeated-dragon)
     :action move
       :parameters (?agent ?from ?to)
       :precondition (and (location? ?from) (location? ?to) (at ?from ?agent))
       :effect (and (not (at ?from ?agent)) (at ?to ?agent))
     :action enter-cave
       :parameters (?agent ?cave)
       :precondition (and (hidden ?cave) (location? ?cave))
       :effect (if (= ?cave 'sword-cave) then (and (not (hidden ?cave)) (has-hero (first (contents ?cave)))) else (error "Invalid cave"))
     :action wake-dragon
       :parameters (?agent ?dragon)
       :precondition (and (sleeping-dragon ?dragon) (at ?dragon ?agent))
       :effect (and (not (sleeping-dragon ?dragon)) (error "Dragon is not asleep"))
     :action fight
       :parameters (?hero ?dragon)
       :precondition (and (at ?hero 'village) (at ?dragon 'cave) (has-hero sword))
       :effect (if (= (strength ?dragon) 6) then (defeated-dragon) else (error "Dragon is too strong"))
   )
   === DOMAIN END ===

   === PROBLEM START ===
   (define (problem swords-and-dragons)
     (domain swords-and-dragons)
     :objects (hero village sword-cave dragon)
     :init
       (and (at hero village)
            (hidden sword-cave)
            (sleeping-dragon dragon))
     :goal
       (and (has-hero sword) (defeated-dragon))
   )
   === PROBLEM END ===