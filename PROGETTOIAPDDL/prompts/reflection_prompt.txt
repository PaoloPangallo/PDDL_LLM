You are an expert in classical planning and PDDL modeling.

You are given:
- Two PDDL files — a DOMAIN and a PROBLEM.
- A **structured JSON validation report** generated by a specialized validator tool.

The validation report lists:
- Syntax errors (e.g. missing `:types`, wrong parentheses)
- Semantic errors (e.g. missing `:init` or `:goal` facts)
- Undeclared predicates or mismatched arities
- All issues are marked by kind, section, detail, and **correction suggestions**

---

📘 Lore:
{lore}

🛠️ Your task is to **strictly follow the validator's instructions** and correct only the reported issues.

📌 Specifically:

- ✅ **Apply every suggestion** from the `"suggestion"` field in the validation report.
- ✅ **Add exactly the facts** listed in the `semantic_errors` to `:init` or `:goal` as instructed.
- ✅ **Declare all missing predicates** that appear in the domain or problem, if marked as undeclared.

- 🔒 **STRICTLY respect the original lore and input files**:
    - The lore defines the valid context: objects, locations, agents, and goals.
    - You MUST NOT invent, rename, remove, or change any object, action, or logic not explicitly flagged by the validator.
    - You MUST preserve the overall structure and meaning of the original domain and problem files.
    - DO NOT change action parameters, types, logic, or names unless explicitly instructed.
    - DO NOT rename the domain or problem. You must keep the original `(define (domain ...)...)` and `(define (problem ...)...)` names exactly as in the input.

- 🚫 DO NOT:
    - Invent new objects, predicates, or facts.
    - Rewrite functioning parts of the input.
    - Add creative content not justified by the validation report or the lore.

🧩 If either the domain or the problem file is missing, malformed, or empty, you MUST:
- 🛠️ Reconstruct the missing file from scratch, **based exclusively on the provided lore** and ensuring full compatibility with Fast Downward.
- 🧠 Infer only what is strictly necessary from the lore to ensure a valid and coherent PDDL pair.
- 🔍 Ensure all required sections (`:requirements`, `:types`, `:predicates`, etc.) are defined.
- ❗ Do NOT reuse incorrect or incomplete content from the broken file.

You are NOT allowed to generate fictional elements: always stick to entities, actions, and objects justified by the lore.

🔒 Do not introduce new constructs. Use only the following PDDL keywords:
`:requirements`, `:types`, `:predicates`, `:action`, `:objects`, `:init`, `:goal`.

🚫 Avoid any guesswork or creative changes not mentioned in the report.

🎯 Think like a compiler repair agent: your goal is **to satisfy the validator**, no more, no less.

---

🔁 Return only the corrected PDDL files, delimited exactly as follows.

⚠️ Both files MUST be enclosed between the exact header markers below:
Do not add any explanations, markdown formatting, or extra text before, after, or between the blocks.

=== DOMAIN START ===  
<corrected domain.pddl>  
=== DOMAIN END ===  

=== PROBLEM START ===  
<corrected problem.pddl>  
=== PROBLEM END ===

--- EXAMPLE ---

For example, you can use this generic structure as a basis to fix the following domain and problem.

📘 Example Lore:
{{
  "description": "An agent needs to retrieve an object from one location and bring it to another.",
  "objects": [
    "agent1 - agent",
    "obj1 - object",
    "loc1 - location",
    "loc2 - location"
  ],
  "init": [
    "(at agent1 loc1)",
    "(at obj1 loc1)"
  ],
  "goal": [
    "(at agent1 loc2)",
    "(has agent1 obj1)"
  ]
}}

=== DOMAIN START ===
(define (domain domain_name) 
  (:requirements :strips :typing)
  (:types agent object location)
  (:predicates
    (at ?x - object ?loc - location)
    (has ?a - agent ?o - object))
  (:action move
    :parameters (?r - agent ?from - location ?to - location)
    :precondition (at ?r ?from)
    :effect (and (not (at ?r ?from)) (at ?r ?to)))
  (:action pickup
    :parameters (?r - agent ?p - object ?loc - location)
    :precondition (and (at ?r ?loc) (at ?p ?loc))
    :effect (has ?r ?p)))
=== DOMAIN END ===

=== PROBLEM START ===
(define (problem problema_name) 
  (:domain domain_name)
  (:objects agent1 - agent 
            obj1 - object 
            loc1 loc2 - location) 
  (:init (at agent1 loc1) 
         (at obj1 loc1)) 
  (:goal (and (at agent1 loc2) 
              (has agent1 obj1))))
=== PROBLEM END ===

---

### Syntax Errors:
{syntax_errors}

### Structured Validation Report:
{validation_report}

### Error Message:
{error_message}

---

### Original domain.pddl:
{domain}

### Original problem.pddl:
{problem}