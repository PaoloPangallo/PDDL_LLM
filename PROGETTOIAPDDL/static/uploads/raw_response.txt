Sure, let's create the PDDL files based on the provided lore and constraints.

### Domain File (domain.pddl)
```lisp
(define (domain hero-quest)
  (:requirements :strips)
  
  ; Predicates
  (:predicates
    (at ?a - agent ?l - location)
    (on-ground ?o - object ?l - location)
    (sleeping ?m - monster)
    (defeated ?m - monster)
  )
  
  ; Types
  (:types
    agent location monster object
  )
  
  ; Actions
  (:action move
    :parameters (?a - agent ?l1 - location ?l2 - location)
    :precondition (and (at ?a ?l1) (not (= ?l1 ?l2)))
    :effect (and (at ?a ?l2) (not (at ?a ?l1)))
  )
  
  (:action pick-up
    :parameters (?a - agent ?o - object ?l - location)
    :precondition (and (at ?a ?l) (on-ground ?o ?l))
    :effect (and (at ?a ?l) (not (on-ground ?o ?l)))
  )
  
  (:action defeat
    :parameters (?a - agent ?m - monster)
    :precondition (and (at ?a ?l) (sleeping ?m))
    :effect (and (defeated ?m))
  )
)
```

### Problem File (problem.pddl)
```lisp
(define (problem hero-quest-problem)
  (:domain hero-quest)
  
  ; Objects
  (:objects
    hero tower_of_varnak sword_of_fire ice_dragon village
  )
  
  ; Initial State
  (:init
    (at hero village)
    (on-ground sword_of_fire tower_of_varnak)
    (sleeping ice_dragon)
  )
  
  ; Goal Conditions
  (:goal
    (and (at hero tower_of_varnak)
         (carrying hero sword_of_fire)
         (defeated ice_dragon))
  )
)
```

### Output Format
```plaintext
=== DOMAIN START ===
(define (domain hero-quest)
  (:requirements :strips)
  
  ; Predicates
  (:predicates
    (at ?a - agent ?l - location)
    (on-ground ?o - object ?l - location)
    (sleeping ?m - monster)
    (defeated ?m - monster)
  )
  
  ; Types
  (:types
    agent location monster object
  )
  
  ; Actions
  (:action move
    :parameters (?a - agent ?l1 - location ?l2 - location)
    :precondition (and (at ?a ?l1) (not (= ?l1 ?l2)))
    :effect (and (at ?a ?l2) (not (at ?a ?l1)))
  )
  
  (:action pick-up
    :parameters (?a - agent ?o - object ?l - location)
    :precondition (and (at ?a ?l) (on-ground ?o ?l))
    :effect (and (at ?a ?l) (not (on-ground ?o ?l)))
  )
  
  (:action defeat
    :parameters (?a - agent ?m - monster)
    :precondition (and (at ?a ?l) (sleeping ?m))
    :effect (and (defeated ?m))
  )
)
=== DOMAIN END ===
=== PROBLEM START ===
(define (problem hero-quest-problem)
  (:domain hero-quest)
  
  ; Objects
  (:objects
    hero tower_of_varnak sword_of_fire ice_dragon village
  )
  
  ; Initial State
  (:init
    (at hero village)
    (on-ground sword_of_fire tower_of_varnak)
    (sleeping ice_dragon)
  )
  
  ; Goal Conditions
  (:goal
    (and (at hero tower_of_varnak)
         (carrying hero sword_of_fire)
         (defeated ice_dragon))
  )
)
=== PROBLEM END ===
```