You are an expert in classical planning and PDDL modeling.

You are given two possibly invalid PDDL files: a domain and a problem file.
These may contain missing types, objects, predicates, or ill-formed goal/init sections.
You are also given a validation report and an error message indicating what is wrong.

Your job is to revise both files to ensure:
- Valid PDDL syntax and structure.
- All referenced objects and predicates are declared appropriately.
- The domain includes all types, predicates, and actions used in the problem.
- The problem contains a complete :objects, :init, and :goal section.
- Any undefined entity (e.g., sword, dragon) should be invented if not present in lore.

Always return the corrected domain and problem as two distinct blocks.
The result MUST strictly begin and end with the following delimiters:

=== DOMAIN START ===
<corrected domain.pddl>
=== DOMAIN END ===

=== PROBLEM START ===
<corrected problem.pddl>
=== PROBLEM END ===

---

### Validation Report:
{
  "valid_syntax": true,
  "missing_sections": [],
  "undefined_objects_in_goal": [
    "on"
  ],
  "undefined_actions": [],
  "mismatched_lore_entities": [],
  "semantic_errors": []
}

---

### Error message:
Missing domain or problem for validation.

ðŸŽ¯ OBIETTIVO:
- Correggi i file domain.pddl e problem.pddl in modo che siano validi e coerenti.
- Se mancano oggetti o predicati nel goal, aggiungili nel dominio o negli oggetti.
- Evita simboli speciali o nomi non validi. Usa nomi semplici e coerenti.
- Tutte le sezioni devono essere presenti e complete.

ðŸ§© Oggetti usati nel goal non definiti: on


---

### Original domain.pddl:
(define (domain simple-puzzle)
     (:requirements :equality :typed :static :quantifiers none)
     (:types block open goal)
     (:predicates
      (at ?x ?y)
      (on ?x ?y)
      (clear ?x))
     (:action move-block
              (:parameters ?x)
              (:precondition (and (at ?x ?y) (clear ?y)))
              (:effect (not (clear ?y)) (and (not (at ?x ?y)) (at ?x (if (eql ?y goal) goal (if (eql ?y open) open (error "Invalid destination")))))) )
     (:action place-block
              (:parameters ?x ?y)
              (:precondition (and (clear ?y) (not (on ?x ?y))) )
              (:effect (not (clear ?y)) (and (at ?x ?y) (clear ?y) (if (eql ?y goal) (error "Cannot place block on the goal")))) ))

---

### Original problem.pddl:
(define (problem blocked-path)
     (:domain simple-puzzle)
     (:objects A B C D E F G H I J K L M N O open goal)
     (:init
      (and
       (at A open)
       (at B open)
       (at C open)
       (at D open)
       (at E open)
       (at F open)
       (at G goal)
       (on I J)
       (clear L) )
     (:goal (and (not (on I J)) (at K goal)))) )
